import streamlit as st
import pandas as pd
import joblib

# Load m√¥ h√¨nh, scaler v√† danh s√°ch c·ªôt
model = joblib.load('random_forest_model.pkl')
scaler = joblib.load('scaler.pkl')
feature_columns = joblib.load('feature_columns.pkl')

# CSS th√™m ·∫£nh n·ªÅn + overlay t·ªëi + input ƒë·∫πp
page_bg = """
<style>
/* ·∫¢nh n·ªÅn v·ªõi overlay t·ªëi */
[data-testid="stAppViewContainer"] {
    position: relative;
    background-image: url("https://res.cloudinary.com/dgeh5svvn/image/upload/v1759677766/anhnen_mnqnny.jpg");
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

/* L·ªõp ph·ªß t·ªëi tr√™n ·∫£nh n·ªÅn */
[data-testid="stAppViewContainer"]::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.45); /* ch·ªânh ƒë·ªô t·ªëi t·∫°i ƒë√¢y (0.3 - 0.6) */
    z-index: 0;
}

/* ƒê·∫£m b·∫£o n·ªôi dung hi·ªÉn th·ªã l√™n tr√™n overlay */
[data-testid="stAppViewContainer"] > div {
    position: relative;
    z-index: 1;
}

/* Header trong su·ªët */
[data-testid="stHeader"] {
    background: rgba(0,0,0,0);
}

/* Sidebar s√°ng nh·∫π */
[data-testid="stSidebar"] {
    background-color: rgba(255,255,255,0.85);
}

/* C·∫£i thi·ªán giao di·ªán input */
input, textarea, select, .stTextInput input, .stTextArea textarea, .stSelectbox div[data-baseweb="select"] * {
    color: #000 !important;
    background-color: rgba(255,255,255,0.9) !important;
    border: 1px solid #ccc !important;
    border-radius: 6px !important;
    font-weight: 500 !important;
}

/* Placeholder (ch·ªØ m·ªù trong input) */
::placeholder {
    color: #666 !important;
    opacity: 1 !important;
}

/* Hover/focus */
input:focus, textarea:focus, select:focus {
    border-color: #4CAF50 !important;
    box-shadow: 0 0 5px rgba(76,175,80,0.4) !important;
}

/* Slider label m√†u ƒëen */
.css-1pahdxg-control, .css-1wa3eu0-placeholder {
    color: black !important;
}

/* N√∫t D·ª± ƒëo√°n ƒë·∫πp h∆°n */
div.stButton > button:first-child {
    background: linear-gradient(90deg, #4CAF50, #2E7D32);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 10px 24px;
    font-weight: bold;
    box-shadow: 0px 4px 10px rgba(0,0,0,0.2);
    transition: 0.3s;
}

div.stButton > button:first-child:hover {
    background: linear-gradient(90deg, #66BB6A, #388E3C);
    box-shadow: 0px 6px 14px rgba(0,0,0,0.3);
    transform: translateY(-2px);
}
</style>
"""
st.markdown(page_bg, unsafe_allow_html=True)



# Giao di·ªán ch√≠nh
st.title("üß† B·ªô Tr·∫Øc Nghi·ªám Tr·∫ßm C·∫£m")

# Nh·∫≠p li·ªáu
age = st.number_input("Tu·ªïi", min_value=10, max_value=100, value=20)
gender = st.selectbox("Gi·ªõi t√≠nh", ["Male", "Female"])
city = st.selectbox("Th√†nh ph·ªë", ["City1", "City2", "City3"])
profession = st.selectbox("Ngh·ªÅ nghi·ªáp", ["Student", "Part-time", "Full-time"])
academic_pressure = st.slider("√Åp l·ª±c h·ªçc t·∫≠p", 0, 10, 5)
work_pressure = st.slider("√Åp l·ª±c c√¥ng vi·ªác", 0, 10, 5)
cgpa = st.number_input("CGPA", min_value=0.0, max_value=4.0, value=3.0)
study_satisfaction = st.slider("M·ª©c ƒë·ªô h√†i l√≤ng v·ªõi h·ªçc t·∫≠p", 0, 10, 5)
job_satisfaction = st.slider("M·ª©c ƒë·ªô h√†i l√≤ng v·ªõi c√¥ng vi·ªác", 0, 10, 5)
sleep_duration = st.number_input("Th·ªùi gian ng·ªß trung b√¨nh (gi·ªù)", min_value=0.0, max_value=24.0, value=6.0)
dietary_habits = st.selectbox("Th√≥i quen ƒÉn u·ªëng", ["Healthy", "Moderate", "Unhealthy"])
degree = st.selectbox("B·∫±ng c·∫•p", ["High School", "Bachelor", "Master"])
suicidal_thoughts = st.selectbox("B·∫°n ƒë√£ t·ª´ng c√≥ √Ω nghƒ© t·ª± t·ª≠?", ["Yes", "No"])
work_study_hours = st.number_input("S·ªë gi·ªù h·ªçc/l√†m vi·ªác m·ªói ng√†y", min_value=0.0, max_value=24.0, value=8.0)
financial_stress = st.slider("√Åp l·ª±c t√†i ch√≠nh", 0, 10, 5)
family_history = st.selectbox("Ti·ªÅn s·ª≠ gia ƒë√¨nh v·ªÅ b·ªánh t√¢m l√Ω", ["Yes", "No"])

# X·ª≠ l√Ω input
input_data = {
    'Age': age,
    'Gender': 1 if gender == "Male" else 0,
    'Work Pressure': work_pressure,
    'Academic Pressure': academic_pressure,
    'CGPA': cgpa,
    'Study Satisfaction': study_satisfaction,
    'Job Satisfaction': job_satisfaction,
    'Sleep Duration': sleep_duration,
    'Work/Study Hours': work_study_hours,
    'Financial Stress': financial_stress,
    'Have you ever had suicidal thoughts ?': 1 if suicidal_thoughts == "Yes" else 0,
    'Family History of Mental Illness': 1 if family_history == "Yes" else 0,
    f'City_{city}': 1,
    f'Profession_{profession}': 1,
    f'Dietary Habits_{dietary_habits}': 1,
    f'Degree_{degree}': 1
}

input_df = pd.DataFrame([input_data])

# ƒêi·ªÅn c√°c c·ªôt c√≤n l·∫°i b·∫±ng 0
for col in feature_columns:
    if col not in input_df.columns:
        input_df[col] = 0

# S·∫Øp x·∫øp l·∫°i c·ªôt theo th·ª© t·ª±
input_df = input_df[feature_columns]

# Chu·∫©n h√≥a d·ªØ li·ªáu
numeric_columns = ['Age', 'CGPA', 'Sleep Duration', 'Work Pressure', 'Academic Pressure',
                   'Study Satisfaction', 'Job Satisfaction', 'Work/Study Hours', 'Financial Stress']
input_df[numeric_columns] = scaler.transform(input_df[numeric_columns])

# D·ª± ƒëo√°n
if st.button("D·ª± ƒëo√°n"):
    prediction = model.predict(input_df)
    result = "üü† C√≥ kh·∫£ nƒÉng b·ªã tr·∫ßm c·∫£m" if prediction[0] == 1 else "üü¢ Kh√¥ng c√≥ d·∫•u hi·ªáu tr·∫ßm c·∫£m"
    st.subheader(f"K·∫øt qu·∫£: {result}")


